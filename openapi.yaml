openapi: 3.0.3
info:
  title: Necrochronicle OpenAPI specification
  description: Specification of the Necrochronicle API
  license:
    name: GPL 3.0
    url: https://www.gnu.org/licenses/gpl-3.0.txt
  version: 0.1.0
paths:
  /users:
    get:
      tags:
        - Users
      summary: List Users
      operationId: listUser
      parameters:
        - in: query
          name: Username
          schema:
            $ref: '#/components/schemas/User/properties/Username'
      responses:
        "200": # OK
          description: A list of Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              # TODO: add example
              # example:
    post:
      tags:
        - Users
      summary: Create a new User
      operationId: createUser
      requestBody:
        description: Properties for the new User
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - required:
                    - Username
                    - Email
            # TODO: add example
            # examples:
      responses:
        "201": # Created
          description: Details of the newly-created User
          headers:
            Location:
              schema:
                type: string
                # TODO: fix the UserID in this link 
                example: '/users/e6ymQY'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              # TODO: add example
              # examples:
  /users/{UserID}:
    parameters:
      - $ref: '#/components/parameters/pathUserID'
    get:
      tags:
        - Users
      summary: Retrieve a specific User
      operationId: retrieveUserByID
      responses:
        "200": # OK
          description: The requested User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              # TODO: add example
              # examples:
    patch:
      tags:
        - Users
      summary: Update a User
      operationId: updateUser
      requestBody:
        description: Properties to update for the User
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            # TODO: add example
            # examples:
      responses:
        "200": # OK
          description: The updated User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              # TODO: add example
              # examples:
    delete:
      tags:
        - Users
      summary: Delete a User
      operationId: deleteUser
      responses:
        "204": # No Content
          description: Deletion successful for the User
  /users/{UserID}/contact-info:
    parameters:
      - $ref: '#/components/parameters/pathUserID'
    get:
      tags:
        - Contact Info
      summary: List this user's ContactInfo
      operationId: ListContactInfo
      parameters:
        - in: query
          name: Service
          schema:
            $ref: '#/components/schemas/ContactInfo/properties/Service'
      responses:
        "200": # OK
          description: A list of ContactInfo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactInfo'
              # TODO: add example
              # example:
    post:
      tags:
        - Contact Info
      summary: Create a new ContactInfo
      operationId: createContactInfo
      requestBody:
        description: Properties for the new ContactInfo
        required: true
        content:
          application/json:
            schema: # Not using ContactInfo schema here to customize property visibility
              type: object
              properties:
                Service:
                  $ref: '#/components/schemas/ContactInfo/properties/Service'
                Value:
                  $ref: '#/components/schemas/ContactInfo/properties/Value'
              required:
                - Service
                - Value
            # TODO: add example
            # examples:
      responses:
        "201": # Created
          description: Details of the newly-created ContactInfo
          headers:
            Location:
              schema:
                type: string
                # TODO: fix the UserID & ContactInfoID in this link 
                example: '/users/e6ymQY/contact-info/dtuc45'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactInfo'
              # TODO: add example
              # examples:
  /users/{UserID}/contact-info/{ContactInfoID}:
    parameters:
      - $ref: '#/components/parameters/pathUserID'
      - $ref: '#/components/parameters/pathContactInfoID'
    get:
      tags:
        - Contact Info
      summary: Retrieve a specific ContactInfo
      operationId: retrieveContactInfoByID
      responses:
        "200": # OK
          description: The requested ContactInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactInfo'
              # TODO: add example
              # examples:
    patch:
      tags:
        - Contact Info
      summary: Update a ContactInfo
      operationId: updateContactInfo
      requestBody:
        description: Properties to update for the ContactInfo
        required: true
        content:
          application/json:
            schema: # Not using ContactInfo schema here to customize property visibility
              type: object
              properties:
                Service:
                  $ref: '#/components/schemas/ContactInfo/properties/Service'
                Value:
                  $ref: '#/components/schemas/ContactInfo/properties/Value'
            # TODO: add example
            # examples:
      responses:
        "200": # OK
          description: The updated ContactInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactInfo'
              # TODO: add example
              # examples:
    delete:
      tags:
        - Contact Info
      summary: Delete a ContactInfo
      operationId: deleteContactInfo
      responses:
        "204": # No Content
          description: Deletion successful for the ContactInfo
  /campaigns:
    get:
      tags:
        - Campaigns
      summary: List Campaigns
      operationId: listCampaign
      parameters:
        - in: query
          name: Name
          schema:
            $ref: '#/components/schemas/Campaign/properties/Name'
          # TODO: add example
          # examples:
        - in: query
          name: Status
          schema:
            $ref: '#/components/schemas/Campaign/properties/Status'
      responses:
        "200": # OK
          description: A list of Factions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Campaign'
              # TODO: add example
              # example:
    post:
      tags:
        - Campaigns
      summary: Create a new Campaign
      operationId: createCampaign
      requestBody:
        description: Properties for the new Campaign
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Campaign'
                - required:
                    - Name
            # TODO: add example
            # examples:
      responses:
        "201": # Created
          description: Details of the newly-created Campaign
          headers:
            Location:
              schema:
                type: string
                # TODO: fix the CampaignID in this link 
                example: '/campaigns/e6ymQY'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
              # TODO: add example
              # examples:
  /campaigns/{CampaignID}:
    parameters:
      - $ref: '#/components/parameters/pathCampaignID'
    get:
      tags:
        - Campaigns
      summary: Retrieve a specific Campaign
      operationId: retrieveCampaignByID
      responses:
        "200": # OK
          description: The requested Campaign
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
              # TODO: add example
              # examples:
    patch:
      tags:
        - Campaigns
      summary: Update a Campaign
      operationId: updateCampaign
      requestBody:
        description: Properties to update for the Campaign
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Campaign'
            # TODO: add example
            # examples:
      responses:
        "200": # OK
          description: The updated Campaign
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
              # TODO: add example
              # examples:
    delete:
      tags:
        - Campaigns
      summary: Delete a Campaign
      operationId: deleteCampaign
      responses:
        "204": # No Content
          description: Deletion successful for the Campaign
  /campaigns/{CampaignID}/users:
    parameters:
      - $ref: '#/components/parameters/pathCampaignID'
    get:
      tags:
        - Campaigns
      summary: List this Campaigns's <-> User associations
      operationId: listCampaignUserAssoc
      parameters:
        - in: query
          name: CampaignRoleName
          schema:
            $ref: '#/components/schemas/CampaignRole/properties/Name'
        - in: query
          name: UserUsername
          schema:
            $ref: '#/components/schemas/User/properties/Username'
      responses:
        "200": # OK
          description: A list of this Campaign's <-> User associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CampaignUserAssoc'
              # TODO: add example
              # example:
    post:
      tags:
        - Campaigns
      summary: Create a new Campaign <-> User association
      operationId: createCampaignUserAssoc
      requestBody:
        description: Properties for the new Campaign <-> User association
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignUserAssoc'
            # TODO: add example
            # examples:
      responses:
        "201": # Created
          description: Details of the newly-created Campaign <-> User association
          headers:
            Location:
              schema:
                type: string
                # TODO: fix UserID in this link 
                example: /campaigns/e6ymQY/users/C8BqwB/
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignUserAssoc'
              # TODO: add example
              # examples:
  /campaigns/{CampaignID}/users/{UserID}:
    parameters:
      - $ref: '#/components/parameters/pathCampaignID'
      - $ref: '#/components/parameters/pathUserID'
    get:
      tags:
        - Campaigns
      summary: Retrieve a specific Campaign <-> User association
      operationId: retrieveCampaignUserAssocByIDs
      responses:
        "200": # OK
          description: The requested Campaign <-> User association
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignUserAssoc'
              # TODO: add example
              # examples:
    patch:
      tags:
        - Campaigns
      summary: Update a Campaign <-> User association
      operationId: updateCampaignUserAssoc
      requestBody:
        description: Properties for the Campaign <-> User association
        required: true
        content:
          application/json:
            schema: # Not using CampaignUserAssoc schema here to customize property visibility
              type: object
              properties:
                CampaignRoleID:
                  $ref: '#/components/schemas/CampaignRoleID'
              required:
                - CampaignRoleID
            # TODO: add example
            # examples:
      responses:
        "200": # OK
          description: Details of the updated Campaign <-> User association
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignUserAssoc'
              # TODO: add example
              # examples:
    delete:
      tags:
        - Campaigns
      summary: Delete a Campaign <-> User association
      operationId: deleteCampaignUserAssoc
      responses:
        "204": # No Content
          description: Deletion successful for the Campaign <-> User association
  /campaigns/{CampaignID}/events:
    parameters:
      - $ref: '#/components/parameters/pathCampaignID'
    get:
      tags:
        - Campaign Events
      summary: List CampaignEvents
      operationId: listCampaignEvent
      parameters:
        # TODO: Figure out how to support querying date ranges
        - in: query
          name: Type
          schema:
            $ref: '#/components/schemas/CampaignEvent/properties/Type'
          # TODO: add example
          # examples:
      responses:
        "200": # OK
          description: A list of CampaignEvents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CampaignEvent'
              # TODO: add example
              # example:
    post:
      tags:
        - Campaign Events
      summary: Create a new CampaignEvent
      operationId: createCampaignEvent
      requestBody:
        description: Properties for the new CampaignEvent
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CampaignEvent'
                - required:
                  - OccurredAt
                  - Type
            # TODO: add example
            # examples:
      responses:
        "201": # Created
          description: Details of the newly-created CampaignEvent
          headers:
            Location:
              schema:
                type: string
                # TODO: fix the CampaignEventID in this link 
                example: '/campaigns/e6ymQY/events/C8BqwB'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignEvent'
              # TODO: add example
              # examples:
  /campaigns/{CampaignID}/events/{CampaignEventID}:
    parameters:
      - $ref: '#/components/parameters/pathCampaignID'
      - $ref: '#/components/parameters/pathCampaignEventID'
    get:
      tags:
        - Campaign Events
      summary: Retrieve a specific CampaignEvent
      operationId: retrieveCampaignEventByID
      responses:
        "200": # OK
          description: The requested CampaignEvent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignEvent'
              # TODO: add example
              # examples:
    patch:
      tags:
        - Campaign Events
      summary: Update a CampaignEvent
      operationId: updateCampaignEvent
      requestBody:
        description: Properties to update for the CampaignEvent
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignEvent'
            # TODO: add example
            # examples:
      responses:
        "200": # OK
          description: The updated CampaignEvent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignEvent'
              # TODO: add example
              # examples:
    delete:
      tags:
        - Campaign Events
      summary: Delete a CampaignEvent
      operationId: deleteCampaignEvent
      responses:
        "204": # No Content
          description: Deletion successful for the CampaignEvent
  /campaigns/{CampaignID}/events/{CampaignEventID}/factions:
    parameters:
      - $ref: '#/components/parameters/pathCampaignID'
      - $ref: '#/components/parameters/pathCampaignEventID'
    get:
      tags:
        - Campaign Events
      summary: List this CampaignEvent's <-> Faction associations
      operationId: listCampaignEventFactionAssoc
      responses:
        "200": # OK
          description: A list of this CampaignEvent's <-> Faction associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CampaignEventFactionAssoc'
              # TODO: add example
              # example:
    post:
      tags:
        - Campaign Events
      summary: Create a new CampaignEvent <-> Faction association
      operationId: createCampaignEventFactionAssoc
      requestBody:
        description: Properties for the new CampaignEvent <-> Faction association
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CampaignEventFactionAssoc'
            # TODO: add example
            # examples:
      responses:
        "201": # Created
          description: Details of the newly-created CampaignEvent <-> Faction association
          headers:
            Location:
              schema:
                type: string
                # TODO: fix CampaignEventID in this link 
                example: /campaigns/e6ymQY/events/C8BqwB/factions/C8BqwB
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignEventFactionAssoc'
              # TODO: add example
              # examples:
  /campaigns/{CampaignID}/events/{CampaignEventID}/factions/{FactionID}:
    parameters:
      - $ref: '#/components/parameters/pathCampaignID'
      - $ref: '#/components/parameters/pathCampaignEventID'
      - $ref: '#/components/parameters/pathFactionID'
    get:
      tags:
        - Campaign Events
      summary: Retrieve a specific CampaignEvent <-> Faction association
      operationId: retrieveCampaignEventFactionAssocByIDs
      responses:
        "200": # OK
          description: The requested CampaignEvent <-> Faction association
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignEventFactionAssoc'
              # TODO: add example
              # examples:
    delete:
      tags:
        - Campaign Events
      summary: Delete a Campaign <-> User association
      operationId: deleteCampaignEventFactionAssoc
      responses:
        "204": # No Content
          description: Deletion successful for the Campaign <-> User association
  /campaigns/{CampaignID}/factions:
    parameters:
      - $ref: '#/components/parameters/pathCampaignID'
    get:
      tags:
        - Factions
      summary: List Factions
      operationId: listFaction
      parameters:
        - in: query
          name: Name
          schema:
            $ref: '#/components/schemas/Faction/properties/Name'
          # TODO: add example
          # examples:
      responses:
        "200": # OK
          description: A list of Factions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Faction'
              # TODO: add example
              # example:
    post:
      tags:
        - Factions
      summary: Create a new Faction
      operationId: createFaction
      requestBody:
        description: Properties for the new Faction
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Faction'
                - required:
                  - UserID
                  - Name
            # TODO: add example
            # examples:
      responses:
        "201": # Created
          description: Details of the newly-created Faction
          headers:
            Location:
              schema:
                type: string
                # TODO: fix the FactionID in this link 
                example: '/campaigns/e6ymQY/factions/C8BqwB'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Faction'
              # TODO: add example
              # examples:
  /campaigns/{CampaignID}/factions/{FactionID}:
    parameters:
      - $ref: '#/components/parameters/pathCampaignID'
      - $ref: '#/components/parameters/pathFactionID'
    get:
      tags:
        - Factions
      summary: Retrieve a specific Faction
      operationId: retrieveFactionByID
      responses:
        "200": # OK
          description: The requested Faction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Faction'
              # TODO: add example
              # examples:
    patch:
      tags:
        - Factions
      summary: Update a Faction
      operationId: updateFaction
      requestBody:
        description: Properties to update for the Faction
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Faction'
            # TODO: add example
            # examples:
      responses:
        "200": # OK
          description: The updated Faction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Faction'
              # TODO: add example
              # examples:
    delete:
      tags:
        - Factions
      summary: Delete a Faction
      operationId: deleteFaction
      responses:
        "204": # No Content
          description: Deletion successful for the Faction
  /campaigns/{CampaignID}/factions/{FactionID}/units:
    parameters:
      - $ref: '#/components/parameters/pathCampaignID'
      - $ref: '#/components/parameters/pathFactionID'
    get:
      tags:
        - Units
      summary: List this Faction's Units
      operationId: listUnit
      parameters:
        - in: query
          name: Name
          schema:
            $ref: '#/components/schemas/Unit/properties/Name'
          # TODO: add example
          # examples:
      responses:
        "200": # OK
          description: A list of Units
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
              example:
                - ID: ILXEgB
                  Name: Snood the Lesser
                  Attributes:
                    Category: Juve
                    Type: Bonepicker
                    XP: 1
                - ID: UYWpOW
                  Name: Hauberk "Heavy-hand"
                  Attributes:
                    Category: Leader
                    Type: Cawdor Word-Keeper
                    XP: 7
    post:
      tags:
        - Units
      summary: Create a new Unit
      operationId: createUnit
      requestBody:
        description: Properties for the new Unit
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Unit'
                - required:
                  - Name
            examples:
              Elias:
                $ref: '#/components/examples/UnitEliasBody'
      responses:
        "201": # Created
          description: Details of the newly-created Unit
          headers:
            Location:
              schema:
                type: string
                example: "/campaigns/e6ymQY/factions/C8BqwB/units/YV6x7P"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
              examples:
                Elias:
                  $ref: '#/components/examples/UnitElias'
          links:
            retrieveUnitByID:
              $ref: '#/components/links/retrieveUnitByID'
  /campaigns/{CampaignID}/factions/{FactionID}/units/{UnitID}:
    parameters:
      - $ref: '#/components/parameters/pathCampaignID'
      - $ref: '#/components/parameters/pathFactionID'
      - $ref: '#/components/parameters/pathUnitID'
    get:
      tags:
        - Units
      summary: Retrieve a specific Unit
      operationId: retrieveUnitByID
      responses:
        "200": # OK
          description: The requested Unit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
              examples:
                Snood:
                  $ref: '#/components/examples/UnitSnood'
    patch:
      tags:
        - Units
      summary: Update a Unit
      operationId: updateUnit
      requestBody:
        description: Properties to update for the Unit
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
            examples:
              Snood:
                $ref: '#/components/examples/UnitSnoodBody'
      responses:
        "200": # OK
          description: The updated Unit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
              examples:
                Snood:
                  $ref: '#/components/examples/UnitSnood'
    delete:
      tags:
        - Units
      summary: Delete a Unit
      operationId: deleteUnit
      responses:
        "204": # No Content
          description: Deletion successful for the Unit
  /campaigns/{CampaignID}/factions/{FactionID}/equipment:
    parameters:
      - $ref: '#/components/parameters/pathCampaignID'
      - $ref: '#/components/parameters/pathFactionID'
    get:
      tags:
       - Equipment
      summary: List this Faction's Equipment
      operationId: listEquipment
      parameters:
        - in: query
          name: Name
          schema:
            $ref: '#/components/schemas/Equipment/properties/Name'
          # TODO: add example
          # examples:
        - in: query
          name: OwnerUnitID
          schema:
            $ref: '#/components/schemas/Equipment/properties/OwnerUnitID'
      responses:
        "200": # OK
          description: A list of Equipment
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Equipment'
              # TODO: add example
              # example:
    post:
      tags:
        - Equipment
      summary: Create a new Equipment
      operationId: createEquipment
      requestBody:
        description: Properties for the new Equipment
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Equipment'
                - required:
                  - Name
            # TODO: add example
            # examples:
      responses:
        "201": # Created
          description: Details of the newly-created Equipment
          headers:
            Location:
              schema:
                type: string
                # TODO: fix the EquipmentID in this example
                example: "/campaigns/e6ymQY/factions/C8BqwB/equipment/1Ejv04"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Equipment'
              # TODO: add example
              # examples:
  /campaigns/{CampaignID}/factions/{FactionID}/equipment/{EquipmentID}:
    parameters:
      - $ref: '#/components/parameters/pathCampaignID'
      - $ref: '#/components/parameters/pathEquipmentID'
      - $ref: '#/components/parameters/pathFactionID'
    get:
      tags:
        - Equipment
      summary: Retrieve a specific Equipment
      operationId: retrieveEquipmentByID
      responses:
        "200": # OK
          description: The requested Equipment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Equipment'
              # TODO: add example
              # examples:
    patch:
      tags:
        - Equipment
      summary: Update an Equipment
      operationId: updateEquipment
      requestBody:
        description: Properties to update for the Equipment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Equipment'
            # TODO: add example
            # examples:
      responses:
        "200": # OK
          description: The updated Equipment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Equipment'
              # TODO: add example
              # examples:
    delete:
      tags:
        - Equipment
      summary: Delete an Equipment
      operationId: deleteEquipment
      responses:
        "204": # No Content
          description: Deletion successful for the Equipment
components:
  links:
    retrieveUnitByID:
      description: >
        The `ID` value returned in the response can be used as the
        `UnitID` parameter in `GET /campaigns/{CampaignID}/factions/{FactionID}/units/{UnitID}`.
      operationId: retrieveUnitByID
      parameters:
        UnitID: '$response.body#/ID'
  parameters:
    pathCampaignID:
      in: path
      name: CampaignID
      required: true
      schema:
        $ref: '#/components/schemas/CampaignID'
    pathCampaignEventID:
      in: path
      name: CampaignEventID
      required: true
      schema:
        $ref: '#/components/schemas/CampaignEventID'
    pathContactInfoID:
      in: path
      name: ContactInfoID
      required: true
      schema:
        $ref: '#/components/schemas/ContactInfoID'
    pathEquipmentID:
      in: path
      name: EquipmentID
      required: true
      schema:
        $ref: '#/components/schemas/EquipmentID'
    pathFactionID:
      in: path
      name: FactionID
      required: true
      schema:
        $ref: '#/components/schemas/FactionID'
    pathUnitID:
      in: path
      name: UnitID
      required: true
      schema:
        $ref: '#/components/schemas/UnitID'
    pathUserID:
      in: path
      name: UserID
      required: true
      schema:
        $ref: '#/components/schemas/UserID'
  schemas:
    Attributes:
      type: object
      additionalProperties: true
    Campaign:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        Status:
          type: string
          enum:
            - draft
            - open
            - ongoing
            - finished
          example: ongoing
        Name: 
          $ref: '#/components/schemas/Name'
        Attributes:
          $ref: '#/components/schemas/Attributes'
      required: 
        - ID
    CampaignEvent:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        CampaignID:
          $ref: '#/components/schemas/CampaignID'
        OccurredAt:
          type: string
          format: date-time
        Type:
          type: string
          example: battle
        Details:
          type: object
          additionalProperties: true
      required:
        - ID
    CampaignEventFactionAssoc:
      type: object
      properties:
        CampaignID:
          $ref: '#/components/schemas/CampaignID'
        FactionID:
          $ref: '#/components/schemas/FactionID'
      required:
        - CampaignID
        - FactionID
    CampaignEventID:
      type: string
      readOnly: true
      example: AuVRJM
    CampaignID:
      type: string
      readOnly: true
      example: e6ymQY
    CampaignRole:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        Name:
          type: string
          enum:
            - arbiter
            - player
            - observer
          readOnly: true
          example: player
      required:
        - ID
        - Name
    CampaignRoleID:
      type: string
      example: 94lJHE
    CampaignUserAssoc:
      type: object
      properties:
        CampaignID:
          $ref: '#/components/schemas/CampaignID'
        UserID:
          $ref: '#/components/schemas/UserID'
        CampaignRoleID:
          $ref: '#/components/schemas/CampaignRoleID'
      required:
        - CampaignID
        - UserID
        - CampaignRoleID
    ContactInfo:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        UserID:
          $ref: '#/components/schemas/UserID'
        Service:
          type: string
          example: Discord
        Value:
          type: string
          example: burgermaster42
      required:
        - ID
    ContactInfoID:
      type: string
      example: QAqz0a
    Equipment:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        OwnerUnitID:
          $ref: '#/components/schemas/UnitID'
        Name:
          $ref: '#/components/schemas/Name'
        Attributes:
          $ref: '#/components/schemas/Attributes'
      required:
        - ID
    EquipmentID:
      type: string
      example: 1Ejv04
    Faction:
      type: object
      properties: 
        ID:
          $ref: '#/components/schemas/ID'
        CampaignID:
          $ref: '#/components/schemas/CampaignID'
        UserID:
          $ref: '#/components/schemas/UserID'
        Name:
          $ref: '#/components/schemas/Name'
        Attributes:
          $ref: '#/components/schemas/Attributes'
      required:
        - ID
    FactionID:
      type: string
      example: C8BqwB
    ID:
      type: string
      readOnly: true
    Name:
      type: string
    Unit:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        Name:
          $ref: '#/components/schemas/Name'
        Attributes:
          $ref: '#/components/schemas/Attributes'
      required:
        - ID
    UnitID:
      type: string
      example: ILXEgB
    User:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        Username:
          type: string
          example: burgermaster
        Email:
          type: string
          format: email
        FirstName:
          type: string
        LastName:
          type: string
      required: 
        - ID
    UserID:
      type: string
      example: hImv4y
  examples:
    UnitElias:
      summary: Elias
      description: Sample new Unit Elias
      value:
        ID: YV6x7P
        Name: Elias
        Attributes:
          Category: Ganger
          Type: Cawdor Brethren
          XP: 0
    UnitEliasBody:
      summary: Elias
      description: Sample new Unit Elias
      value:
        Name: Elias
        Attributes:
          Category: Ganger
          Type: Cawdor Brethren
    UnitSnood:
      summary: Snood
      description: Sample Unit Snood the Lesser
      value:
        ID: ILXEgB
        Name: Snood the Lesser
        Attributes:
          Category: Juve
          Type: Bonepicker
          XP: 1
    UnitSnoodBody:
      summary: Snood
      description: Sample Unit Snood the Lesser
      value:
        Name: Snood the Lesser
        Attributes:
          Category: Juve
          Type: Bonepicker
          XP: 1
